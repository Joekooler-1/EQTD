import tkinter as tk
from tkinter import filedialog, messagebox
import pandas as pd
import os

class FeedMergerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Feed File Merger")
        self.psv_file = None
        self.csv_converted_file = None
        self.feed_files = []

        # Create interface components
        self.create_widgets()

    def create_widgets(self):
        # Buttons and labels for file selection
        self.psv_label = tk.Label(self.root, text="Select .psv file:")
        self.psv_label.pack()
        self.psv_button = tk.Button(self.root, text="Choose .psv file", command=self.load_psv_file)
        self.psv_button.pack()

        self.feed_label = tk.Label(self.root, text="Select 3 feed files:")
        self.feed_label.pack()
        self.feed_button = tk.Button(self.root, text="Choose feed files", command=self.load_feed_files)
        self.feed_button.pack()

        # Button to process files
        self.process_button = tk.Button(self.root, text="Merge Files", command=self.merge_files, state=tk.DISABLED)
        self.process_button.pack()

        # Button to save the merged output
        self.save_button = tk.Button(self.root, text="Save Merged File", command=self.save_file, state=tk.DISABLED)
        self.save_button.pack()

    def load_psv_file(self):
        # Open file dialog to select the .psv file
        self.psv_file = filedialog.askopenfilename(filetypes=[("PSV files", "*.psv")])
        if self.psv_file:
            try:
                # Load the .psv file with encoding handling
                try:
                    psv_data = pd.read_csv(self.psv_file, delimiter='|', encoding='utf-8')
                except UnicodeDecodeError:
                    psv_data = pd.read_csv(self.psv_file, delimiter='|', encoding='latin1')

                # Remove duplicates in the Client_ID column
                psv_data = psv_data.drop_duplicates(subset=['Client_ID'])

                # Convert .psv to .csv by saving it
                csv_path = os.path.splitext(self.psv_file)[0] + "_converted.csv"
                psv_data.to_csv(csv_path, index=False)
                self.csv_converted_file = csv_path

                messagebox.showinfo("Conversion Complete", f".psv file converted to CSV:\n{csv_path}")
                self.update_process_button_state()

            except Exception as e:
                messagebox.showerror("Error", f"An error occurred while converting the file: {e}")

    def load_feed_files(self):
        # Open file dialog to select feed files (allowing only 3 files to be selected)
        self.feed_files = filedialog.askopenfilenames(filetypes=[("CSV files", "*.csv")])
        if len(self.feed_files) == 3:
            messagebox.showinfo("Files Selected", f"Selected feed files:\n{', '.join(self.feed_files)}")
            # Enable process button if all files are loaded
            self.update_process_button_state()
        else:
            messagebox.showwarning("Invalid Selection", "Please select exactly 3 feed files.")

    def update_process_button_state(self):
        # Enable merge button if both the converted CSV and three feed files are selected
        if self.csv_converted_file and len(self.feed_files) == 3:
            self.process_button.config(state=tk.NORMAL)

    def merge_files(self):
        try:
            # Load the converted CSV file
            psv_data = pd.read_csv(self.csv_converted_file)

            # Load each feed file and merge
            merged_data_frames = []
            for feed_file in self.feed_files:
                try:
                    feed_data = pd.read_csv(feed_file, encoding='utf-8')
                except UnicodeDecodeError:
                    feed_data = pd.read_csv(feed_file, encoding='latin1')
                    
                merged = pd.merge(feed_data, psv_data, left_on='Column_B', right_on='Column_I', how='inner')
                merged_data_frames.append(merged)

            # Concatenate merged data
            self.final_merged_data = pd.concat(merged_data_frames, ignore_index=True)
            messagebox.showinfo("Merge Complete", "Files have been successfully merged.")
            self.save_button.config(state=tk.NORMAL)

        except Exception as e:
            messagebox.showerror("Error", f"An error occurred: {e}")

    def save_file(self):
        # Save the merged file
        save_path = filedialog.asksaveasfilename(defaultextension=".csv", filetypes=[("CSV files", "*.csv")])
        if save_path:
            self.final_merged_data.to_csv(save_path, index=False)
            messagebox.showinfo("File Saved", f"File saved successfully at {save_path}")

# Run the tkinter app
root = tk.Tk()
app = FeedMergerApp(root)
root.mainloop()
